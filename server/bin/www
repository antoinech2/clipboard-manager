#!/usr/bin/env node

var http = require('http');
var express = require('express');
var expressWs = require('express-ws');
var debug = require('debug')('server:server');
var app = express();
var init = require('../app').initApp;

var port = normalizePort(process.env.PORT || '3001');
app.set('port', port);

var server = http.createServer(app);

// Initialisez express-ws avec l'application Express et le serveur HTTP
var expressWsInstance = expressWs(app, server);
console.log('Express WebSocket instance initialized');


// Écoutez sur le port spécifié
server.listen(port);
server.on('error', onError);
server.on('listening', onListening);

/**
 * Normalisez le port en nombre, chaîne ou faux.
 */
function normalizePort(val) {
  var port = parseInt(val, 10);
  if (isNaN(port)) {
    return val;
  }
  if (port >= 0) {
    return port;
  }
  return false;
}

/**
 * Gestionnaire d'événements pour l'erreur du serveur HTTP.
 */
function onError(error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  var bind = typeof port === 'string'
    ? 'Pipe ' + port
    : 'Port ' + port;

  switch (error.code) {
    case 'EACCES':
      console.error(bind + ' requires elevated privileges');
      process.exit(1);
      break;
    case 'EADDRINUSE':
      console.error(bind + ' is already in use');
      process.exit(1);
      break;
    default:
      throw error;
  }
}

/**
 * Gestionnaire d'événements pour l'événement "listening" du serveur HTTP.
 */
function onListening() {
  var addr = server.address();
  var bind = typeof addr === 'string'
    ? 'pipe ' + addr
    : 'port ' + addr.port;
  debug('Listening on ' + bind);
  console.info('Server is running on port ' + addr.port);
}

init(app, expressWsInstance.getWss());